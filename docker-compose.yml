version: '2'

services:
  api:
    build:
      context: .
      args:
        http_proxy: ${HTTP_PROXY}
        https_proxy: ${HTTPS_PROXY}
    environment:
      - "FLASK_ENV=development" # DEBUG mode for development
      - "KAFKA_LAUNCH_BROKER=kafka:9092"
      - "KAFKA_LAUNCH_TOPIC=uris.candidates.fc"
      # Internal test systems
      - "CDX_SERVER=http://cdxserver:8080/tc"
      - "WAYBACK_SERVER=http://pywb:8080/test/"
      - "WEBHDFS_PREFIX=http://warc-server:8000/by-filename/"
      - "WEBRENDER_ARCHIVE_SERVER=http://webrender:8010/render"
      - "IIIF_SERVER=http://iiif:8182"
      # Live systems
      #- "CDX_SERVER=http://cdx.api.wa.bl.uk/data-heritrix"
      #- "WAYBACK_SERVER=http://192.168.45.25:8180/archive/"
      #- "WEBHDFS_PREFIX=http://hdfs.api.wa.bl.uk/webhdfs/v1"
    depends_on:
     - cdxserver
     - warc-server
     - webrender
     - kafka
     - pywb
     - iiif
    ports:
     - "8000:8000"

  # Archived web page rendering service
  webrender:
    image: ukwa/webrender-puppeteer:2.2.1
    #image: webrender-puppeteer_webrender:latest
    environment:
      - "HTTP_PROXY=http://pywb:8080"
      - "LC_ALL=en_US.utf8"
      - "PORT=8010"
      - "NODE_ENV=production"
      - "RUN_BEHAVIOURS=false"
    ports:
      - "18010:8010"
    depends_on:
      - pywb

  # OutbackCDX
  # Needs populating using script in integration testing folder.
  cdxserver:
    image: nlagovau/outbackcdx:0.11.0
    command: "java -jar outbackcdx.jar -d /cdx-data -p 8080 -b 0.0.0.0"
    ports:
      - "19090:8080"
    volumes:
      - ./integration-testing/outbackcdx-data:/cdx-data

  # PyWB
  pywb:
    image: webrecorder/pywb:2.6.6
    ports:
      - "18080:8080"
    volumes:
      - ./integration-testing/webarchive:/webarchive

  warc-server:
    image: ukwa/warc-server:1.1.0
    #ports:
    #  - 18000:8000
    environment:
      - "WARC_PATHS=/webarchive/collections/test/archive"
    volumes:
      - ./integration-testing/webarchive:/webarchive

  # Kafka
  kafka:
    image: wurstmeister/kafka:1.1.0
    #ports:
    #  - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR: 10
      LOG_RETENTION_HOURS: -1
      LOG_RETENTION_BYTES: -1
      NUM_PARTITIONS: 16
      KAFKA_CREATE_TOPICS: "uris.candidates.fc:16:1 --config=compression.type=snappy,uris.tocrawl.fc:16:1 --config=compression.type=snappy,uris.crawled.fc:16:1 --config=compression.type=snappy,uris.discarded.fc:16:1 --config=compression.type=snappy"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      LOG4J_LOGGER_KAFKA: WARN
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  # Needs a Zookeeper too
  # ----
  zookeeper:
    image: wurstmeister/zookeeper
    #ports:
    # - "2181:2181"

  # 
  # IIIF Server to manipulate images
  # Reference for env vars: https://github.com/lyrasis/docker-cantaloupe/blob/master/Dockerfile
  # 
  iiif:
    image: lyrasis/cantaloupe
    environment:
      SOURCE_STATIC: "HttpSource"
      HTTPSOURCE_BASICLOOKUPSTRATEGY_URL_PREFIX: "http://api:8000/iiif/render_raw?pwid="
      HTTPSOURCE_BASICLOOKUPSTRATEGY_URL_SUFFIX: ""
      HTTPSOURCE_REQUEST_TIMEOUT: 3600
      PROCESSOR_STREAM_RETRIEVAL_STRATEGY: "CacheStrategy"
      # Seems to cope better with sharp edges:
      PROCESSOR_DOWNSCALE_FILTER: "Lanczos3"
      # Web pages suffer badly from JPEG artefacts. Can use PNG instead.
      PROCESSOR_JPG_QUALITY: 100
      CACHE_SERVER_RESOLVE_FIRST: "false"
      LOG_APPLICATION_LEVEL: "info"
      LOG_ACCESS_CONSOLEAPPENDER_ENABLED: "true"
      # Not needed in prod:
      PRINT_STACK_TRACE_ON_ERROR_PAGES: "false"
    ports:
      - 8182:8182
    volumes:
      - ./integration-testing/iiif_cache:/var/cache/cantaloupe
