version: '2'

services:
  api:
    build:
      context: .
      args:
        http_proxy: ${HTTP_PROXY}
        https_proxy: ${HTTPS_PROXY}
    environment:
      - "CDX_SERVER=http://cdxserver:8080/tc"
      - "WAYBACK_SERVER=http://pywb:8080/test/"
      - "KAFKA_BOOTSTRAP_SERVERS=kafka:9092"
      - "WEBHDFS_PREFIX=http://warc-server:8000/by-filename/"
    depends_on:
     - cdxserver
     - webrender
     - pywb
    ports:
     - "8000:8000"

  # Archived web page rendering service
  webrender:
    image: ukwa/webrender-api:1.0.15
    environment:
      - "HTTP_PROXY=pywb:8080"
      - "DOCKER_NETWORK=ukwa-access-api_default" # pywb network, to attach renderer containers to
      - "LC_ALL=en_US.utf8"
      - "WEB_RENDER_TMP=/tmp/webrender" # Has to match the _host_ folder mounted below.
      # DOCKER_HOST could be used to run rendering on a dedicated service.
    ports:
      - "18010:8010"
    depends_on:
      - pywb
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Needs to connect to Docker to launch render container
      - /tmp/webrender:/tmp/webrender # Host mount must match internal mount at present!

  # OutbackCDX
  # Needs populating using script in integration testing folder.
  cdxserver:
    image: nlagovau/outbackcdx:0.7.0
    command: "java -jar outbackcdx.jar -d /cdx-data -p 8080 -b 0.0.0.0"
    ports:
      - "19090:8080"
    volumes:
      - ./integration-testing/outbackcdx-data:/cdx-data

  # PyWB
  pywb:
    image: webrecorder/pywb:2.4.2
    ports:
      - "18080:8080"
    volumes:
      - ./integration-testing/webarchive:/webarchive

  warc-server:
    image: ukwa/warc-server
    #ports:
    #  - 18000:8000
    environment:
      - "WARC_PATHS=/webarchive/collections/test/archive"
    volumes:
      - ./integration-testing/webarchive:/webarchive

  # Kafka
  kafka:
    image: wurstmeister/kafka:1.1.0
    #ports:
    #  - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR: 10
      LOG_RETENTION_HOURS: -1
      LOG_RETENTION_BYTES: -1
      NUM_PARTITIONS: 16
      KAFKA_CREATE_TOPICS: "uris.candidates.fc:16:1 --config=compression.type=snappy,uris.tocrawl.fc:16:1 --config=compression.type=snappy,uris.crawled.fc:16:1 --config=compression.type=snappy,uris.discarded.fc:16:1 --config=compression.type=snappy"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      LOG4J_LOGGER_KAFKA: WARN
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  # Needs a Zookeeper too
  # ----
  zookeeper:
    image: wurstmeister/zookeeper
    #ports:
    # - "2181:2181"

  # 
  # IIIF Server to manipulate images
  # Reference for env vars: https://github.com/lyrasis/docker-cantaloupe/blob/master/Dockerfile
  # 
  iiif:
    image: lyrasis/cantaloupe
    environment:
      SOURCE_STATIC: "HttpSource"
      HTTPSOURCE_BASICLOOKUPSTRATEGY_URL_PREFIX: "http://api:8000/render_raw?pwid="
      HTTPSOURCE_BASICLOOKUPSTRATEGY_URL_SUFFIX: ""
      HTTPSOURCE_REQUEST_TIMEOUT: 3600
      PROCESSOR_STREAM_RETRIEVAL_STRATEGY: "CacheStrategy"
      # Seems to cope better with sharp edges:
      PROCESSOR_DOWNSCALE_FILTER: "Lanczos3"
      # Web pages suffer badly from JPEG artefacts. Can use PNG instead.
      PROCESSOR_JPG_QUALITY: 100 
      CACHE_SERVER_RESOLVE_FIRST: 'false'
      LOG_APPLICATION_LEVEL: "warn"
      LOG_ACCESS_CONSOLEAPPENDER_ENABLED: "true"
      # Not needed in prod:
      PRINT_STACK_TRACE_ON_ERROR_PAGES: "false"
    #ports:
    #  - 8182:8182
    volumes:
      - ./integration-testing/iiif_cache:/var/cache/cantaloupe
